name: Test app

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Add a health check to ensure postgres is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        version: "latest"
    - name: Install dependencies
      run: uv sync --locked

    - name: Check Django Configuration
      env:
        DJANGO_SETTINGS_MODULE: inventory.tests.settings
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      run: |
        uv run python -c "
import os
import django
import sys

print('Python executable:', sys.executable)
print('Python version:', sys.version)
print('Current directory:', os.getcwd())
print('DJANGO_SETTINGS_MODULE:', os.environ.get('DJANGO_SETTINGS_MODULE'))
print('Sys path:')
for p in sys.path:
    print(f'  {p}')

try:
    import inventory
    print('Inventory package location:', inventory.__file__)
except ImportError as e:
    print('Failed to import inventory:', e)

try:
    import inventory.tests
    print('Inventory tests location:', inventory.tests.__file__)
except ImportError as e:
    print('Failed to import inventory.tests:', e)

try:
    django.setup()
    print('Django setup successful')
except Exception as e:
    print('Django setup failed:', e)
"
      
    - name: Apply migrations
      env:
        # Database settings
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        # Django settings
        DJANGO_SETTINGS_MODULE: inventory.tests.settings
      run: |
        uv run -m django migrate
    - name: Run Tests
      run: uv run pytest        
