# Generated by Django 4.2.17 on 2025-07-29 21:27
import datetime

import django.utils.timezone
from django.db import migrations, models


def convert_date_to_datetime(apps, schema_editor):
    """
    Convert existing date values to datetime with time set to 00:00:00
    """
    Item = apps.get_model("inventory", "Item")

    for item in Item.objects.all():
        if item.date_added:
            # Convert date to datetime at midnight
            item.created_at = django.utils.timezone.make_aware(
                datetime.datetime.combine(item.date_added, datetime.time.min)
            )
            item.save()


def reverse_datetime_to_date(apps, schema_editor):
    """
    Reverse operation: convert datetime back to date
    """
    Item = apps.get_model("inventory", "Item")

    for item in Item.objects.all():
        if item.created_at:
            # Extract just the date part
            item.date_added = item.created_at.date()
            item.save()


class Migration(migrations.Migration):
    dependencies = [
        (
            "inventory",
            "0010_alter_order_options_rename_created_order_created_at_and_more",
        ),
    ]

    operations = [
        # Step 1: Add the new datetime field (without auto_now_add initially)
        migrations.AddField(
            model_name="item",
            name="created_at",
            field=models.DateTimeField(null=True, blank=True),
        ),
        # Step 2: Convert data from date_added to created_at
        migrations.RunPython(
            convert_date_to_datetime,
            reverse_datetime_to_date,
        ),
        # Step 3: Remove the original date field
        migrations.RemoveField(
            model_name="item",
            name="date_added",
        ),
        # Step 4: Update the field definition with auto_now_add and remove null/blank
        migrations.AlterField(
            model_name="item",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True),
        ),
    ]
